import cats.implicits._
import org.scalatest.FlatSpec
import scala.util.{Failure, Success, Try}
import tryt.TryT

class TryTSpec extends FlatSpec {

  import org.scalatest.Matchers._

  behavior of "The TryT monad transformer"

  val sample: TryT[Option, Int] = TryT.pure[Option, Int](3)

  "The map function" should "replace the inner value" in {

    val mapped = sample.map(_.toString)
    assert(mapped.value === Some(Success("3")))
  }

  "The transform function" should "apply a function to the inner Try" in {

    val transformed = sample.transform(inner => Try { assert(inner.isFailure) })
    transformed.value.get.foreach(throwable => {
      assert(throwable.toString == "org.scalatest.exceptions.TestFailedException: inner.isFailure was false")
    })
  }

  "The flatTransform function" should "replace the outer Option" in {

    val transformed = sample.flatTransform(_ => None)
    assert(transformed.value === None)
  }

  "The flatTransformT function" should "flatMap over the inner Try" in {

    val transformed = sample.flatTransformT(_ => TryT[Option, Int](None))
    assert(transformed.value === None)
  }

  "The flatMap function" should "flatMap over both monads" in {

    val transformed = sample.flatMap(inner => Some(Success(inner + 1)))
    assert(transformed.value === Some(Success(4)))
  }

  "The flatMapT function" should "flatMap over both monads" in {

    val transformed = sample.flatMapT(inner => TryT[Option, Int](Some(Success(inner + 1))))
    assert(transformed.value === Some(Success(4)))
  }

  "The subflatMap function" should "flatMap over the inner Try" in {

    val transformed = sample.subflatMap(inner => Success(inner + 1))
    assert(transformed.value === Some(Success(4)))
  }

  "The fold function" should "fold the inner Try" in {

    val transformed = sample.fold(_ => new Error("foo"), _ + 1)
    assert(transformed === Some(4))

    val sampleFailure = TryT[Option, Int](Some(Failure(new Error("bar"))))
    val transformedFailure = sampleFailure.fold(_ => new Error("foo"), _ + 1)
    assert(transformed.get.toString === "foo")
  }
}
